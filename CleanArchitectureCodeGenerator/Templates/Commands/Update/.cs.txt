using System.ComponentModel;
using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};
#nullable disable warnings

public class Update{itemname}Command: ICacheInvalidatorRequest<Result<Guid>>
{
      [Description("Id")]
      public Guid Id { get; set; }
        {dtoFieldDefinition}
        public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
        public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<{itemname}Dto,Update{itemname}Command>(MemberList.None);
            CreateMap<Update{itemname}Command,{itemname}>(MemberList.None);
        }
    }
}

public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, Result<Guid>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<Update{itemname}CommandHandler> _localizer;
    public Update{itemname}CommandHandler(
        IApplicationDbContext context,
        IStringLocalizer<Update{itemname}CommandHandler> localizer,
            IMapper mapper
        )
    {
        _context = context;
        _localizer = localizer;
        _mapper = mapper;
    }
    public async Task<Result<Guid>> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
    {

        var item =await _context.{nameofPlural}.FindAsync( new object[] { request.Id }, cancellationToken)?? throw new NotFoundException($"{itemname} with id: [{request.Id}] not found.");
        item = _mapper.Map(request, item);
		// raise a update domain event
		item.AddDomainEvent(new {itemname}UpdatedEvent(item));
        await _context.SaveChangesAsync(cancellationToken);
        return await Result<Guid>.SuccessAsync(item.Id);
    }
}

