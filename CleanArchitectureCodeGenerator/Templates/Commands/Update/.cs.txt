// ------------------------------------------------------------------------------
// <auto-generated>
//     This class was generated by a code scaffolding tool.
//     Manual editing of this class is NOT recommended, as changes will be
//     overwritten if the scaffolding tool is run again.
//     
//     If you wish to make changes and prevent the scaffolding tool from
//     overwriting this file, remove this signature.
//     Removing this signature indicates that this class will no longer
//     be managed by the scaffolding tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.ComponentModel;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;

namespace {{ namespacename }};
#nullable disable warnings

public class Update{{ modelname }}Command: ICacheInvalidatorRequest<Result<Guid>>
{
      [Description("Id")]
      public Guid Id { get; set; }
        {{ commandfielddefinition }}
        public string CacheKey => {{ modelname }}CacheKey.GetAllCacheKey;
        public CancellationTokenSource? SharedExpiryTokenSource => {{ modelname }}CacheKey.GetOrCreateTokenSource();
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<{{ modelname }}Dto,Update{{ modelname }}Command>(MemberList.None);
            CreateMap<Update{{ modelname }}Command,{{ modelname }}>(MemberList.None);
        }
    }
}

public class Update{{ modelname }}CommandHandler : IRequestHandler<Update{{ modelname }}Command, Result<Guid>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<Update{{ modelname }}CommandHandler> _localizer;
    public Update{{ modelname }}CommandHandler(
        IApplicationDbContext context,
        IStringLocalizer<Update{{ modelname }}CommandHandler> localizer,
            IMapper mapper
        )
    {
        _context = context;
        _localizer = localizer;
        _mapper = mapper;
    }
    public async Task<Result<Guid>> Handle(Update{{ modelname }}Command request, CancellationToken cancellationToken)
    {

        var item =await _context.{{ modelnameplural }}.FindAsync( new object[] { request.Id }, cancellationToken)?? throw new NotFoundException($"{{ modelname }} with id: [{request.Id}] not found.");
        item = _mapper.Map(request, item);
		// raise a update domain event
		item.AddDomainEvent(new {{ modelname }}UpdatedEvent(item));
        await _context.SaveChangesAsync(cancellationToken);
        return await Result<Guid>.SuccessAsync(item.Id);
    }
}

