// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

    public class Import{nameofPlural}Command: ICacheInvalidatorRequest<Result<int>>
    {
        public string FileName { get; set; }
        public byte[] Data { get; set; }
        public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
        public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
        public Import{nameofPlural}Command(string fileName,byte[] data)
        {
           FileName = fileName;
           Data = data;
        }
    }
    public record class Create{nameofPlural}TemplateCommand : IRequest<Result<byte[]>>
    {
 
    }

    public class Import{nameofPlural}CommandHandler : 
                 IRequestHandler<Create{nameofPlural}TemplateCommand, Result<byte[]>>,
                 IRequestHandler<Import{nameofPlural}Command, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<Import{nameofPlural}CommandHandler> _localizer;
        private readonly IExcelService _excelService;
        private readonly {itemname}Dto _dto = new();

        public Import{nameofPlural}CommandHandler(
            IApplicationDbContext context,
            IExcelService excelService,
            IStringLocalizer<Import{nameofPlural}CommandHandler> localizer,
            IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _excelService = excelService;
            _mapper = mapper;
        }
        #nullable disable warnings
        public async Task<Result<int>> Handle(Import{nameofPlural}Command request, CancellationToken cancellationToken)
        {

           var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, {itemname}Dto, object?>>
            {
                {importFuncExpression}
            }, _localizer[_dto.GetClassDescription()]);
            if (result.Succeeded && result.Data is not null)
            {
                foreach (var dto in result.Data)
                {
                    var exists = await _context.{nameofPlural}.AnyAsync(x => x.Name == dto.Name, cancellationToken);
                    if (!exists)
                    {
                        var item = _mapper.Map<{itemname}>(dto);
                        // add create domain events if this entity implement the IHasDomainEvent interface
				        // item.AddDomainEvent(new {itemname}CreatedEvent(item));
                        await _context.{nameofPlural}.AddAsync(item, cancellationToken);
                    }
                 }
                 await _context.SaveChangesAsync(cancellationToken);
                 return await Result<int>.SuccessAsync(result.Data.Count());
           }
           else
           {
               return await Result<int>.FailureAsync(result.Errors);
           }
        }
        public async Task<Result<byte[]>> Handle(Create{nameofPlural}TemplateCommand request, CancellationToken cancellationToken)
        {
            // TODO: Implement Import{nameofPlural}CommandHandler method 
            var fields = new string[] {
                   // TODO: Define the fields that should be generate in the template, for example:
                   {templateFieldDefinition}
                };
            var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
    }

