using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;

namespace {{ namespacename }};
#nullable disable warnings

public class AddEdit{{ modelname }}Command: ICacheInvalidatorRequest<Result<Guid>>
{
      [Description("Id")]
      public Guid Id { get; set; }
      {{ commandfielddefinition }}

      public string CacheKey => {{ modelname }}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {{ modelname }}CacheKey.GetOrCreateTokenSource();

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<{{ modelname }}Dto,AddEdit{{ modelname }}Command>(MemberList.None);
            CreateMap<AddEdit{{ modelname }}Command,{{ modelname }}>(MemberList.None);
        }
    }
}

    public class AddEdit{{ modelname }}CommandHandler : IRequestHandler<AddEdit{{ modelname }}Command, Result<Guid>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<AddEdit{{ modelname }}CommandHandler> _localizer;
        public AddEdit{{ modelname }}CommandHandler(
            IApplicationDbContext context,
            IStringLocalizer<AddEdit{{ modelname }}CommandHandler> localizer,
            IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _mapper = mapper;
        }
        public async Task<Result<Guid>> Handle(AddEdit{{ modelname }}Command request, CancellationToken cancellationToken)
        {
            if (request.Id != Guid.Empty)
            {
                var item = await _context.{{ modelnameplural }}.FindAsync(new object[] { request.Id }, cancellationToken) ?? throw new NotFoundException($"{{ modelname }} with id: [{request.Id}] not found.");
                item = _mapper.Map(request, item);
				// raise a update domain event
				item.AddDomainEvent(new {{ modelname }}UpdatedEvent(item));
                await _context.SaveChangesAsync(cancellationToken);
                return await Result<Guid>.SuccessAsync(item.Id);
            }
            else
            {
                var item = _mapper.Map<{{ modelname }}>(request);
                // raise a create domain event
				item.AddDomainEvent(new {{ modelname }}CreatedEvent(item));
                _context.{{ modelnameplural }}.Add(item);
                await _context.SaveChangesAsync(cancellationToken);
                return await Result<Guid>.SuccessAsync(item.Id);
            }
           
        }
    }

