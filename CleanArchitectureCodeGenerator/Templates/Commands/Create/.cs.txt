using System.ComponentModel;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;

namespace {{ namespacename }};
#nullable disable warnings

public class Create{{ modelname }}Command: ICacheInvalidatorRequest<Result<Guid>>
{
      [Description("Id")]
      public Guid Id { get; set; }
      {{ commandfielddefinition }}
      public string CacheKey => {{ modelname }}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {{ modelname }}CacheKey.GetOrCreateTokenSource();
    private class Mapping : Profile
    {
        public Mapping()
        {
             CreateMap<{{ modelname }}Dto,Create{{ modelname }}Command>(MemberList.None);
             CreateMap<Create{{ modelname }}Command,{{ modelname }}>(MemberList.None);
        }
    }
}
    
public class Create{{ modelname }}CommandHandler : IRequestHandler<Create{{ modelname }}Command, Result<Guid>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<Create{{ modelname }}Command> _localizer;
    public Create{{ modelname }}CommandHandler(
        IApplicationDbContext context,
        IStringLocalizer<Create{{ modelname }}Command> localizer,
        IMapper mapper
        )
    {
        _context = context;
        _localizer = localizer;
        _mapper = mapper;
    }
    public async Task<Result<Guid>> Handle(Create{{ modelname }}Command request, CancellationToken cancellationToken)
    {
        var item = _mapper.Map<{{ modelname }}>(request);
        // raise a create domain event
	    item.AddDomainEvent(new {{ modelname }}CreatedEvent(item));
        _context.{{ modelnameplural }}.Add(item);
        await _context.SaveChangesAsync(cancellationToken);
        return  await Result<Guid>.SuccessAsync(item.Id);
    }
}

