using System.ComponentModel;
using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class Create{itemname}Command: ICacheInvalidatorRequest<Result<Guid>>
{
      [Description("Id")]
      public Guid Id { get; set; }
      {dtoFieldDefinition}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.GetOrCreateTokenSource();
    private class Mapping : Profile
    {
        public Mapping()
        {
             CreateMap<{itemname}Dto,Create{itemname}Command>(MemberList.None);
             CreateMap<Create{itemname}Command,{itemname}>(MemberList.None);
        }
    }
}
    
    public class Create{itemname}CommandHandler : IRequestHandler<Create{itemname}Command, Result<Guid>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<Create{itemname}Command> _localizer;
        public Create{itemname}CommandHandler(
            IApplicationDbContext context,
            IStringLocalizer<Create{itemname}Command> localizer,
            IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _mapper = mapper;
        }
        public async Task<Result<Guid>> Handle(Create{itemname}Command request, CancellationToken cancellationToken)
        {
           var item = _mapper.Map<{itemname}>(request);
           // raise a create domain event
	       item.AddDomainEvent(new {itemname}CreatedEvent(item));
           _context.{nameofPlural}.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<Guid>.SuccessAsync(item.Id);
        }
    }

