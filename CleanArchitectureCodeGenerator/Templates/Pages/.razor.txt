@page "/pages/{{ modelnameplural }}"

@using BlazorDownloadFile
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Specifications
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Commands.Delete
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Commands.Import
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Queries.Export
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Queries.Pagination
@using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Commands.AddEdit
@using {{ rootnamespace }}.{{ uiprojectname }}.Pages.{{ modelnameplural }}.Components

@inject IStringLocalizer<{{ modelnameplural }}> L
@attribute [Authorize(Policy = Permissions.{{ modelnameplural }}.View)]
<PageTitle>@Title</PageTitle>

<MudPaper Class="pa-4 my-2" Outlined="true">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudStack Row="true" StretchItems="StretchItems.End">
                <MudStack Justify="Justify.Center">
                    <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                </MudStack>
                <MudStack Justify="Justify.Center" Spacing="0">
                    <MudText Typo="Typo.h6" Class="mb-2">@Title</MudText>
                    <MudText Typo="Typo.body2">@L[_currentDto.GetClassDescription()]</MudText>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudStack Row="true" Justify="Justify.SpaceEvenly" StretchItems="StretchItems.All">
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               Disabled="@_loading"
                               OnClick="@(()=>OnRefresh())"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary">@ConstantString.Refresh</MudButton>
                    @if (_canCreate)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="OnCreate"
                                   IconColor="Color.Surface">@ConstantString.New</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.ContentCopy"
                                   Size="Size.Small"
                                   Disabled="@(_selectedItems.Count!=1)"
                                   OnClick="OnClone"
                                   IconColor="Color.Surface">@ConstantString.Clone</MudButton>
                    }
                    @if (_canDelete)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectedItems.Count>0))"
                                   Size="Size.Small"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                    }
                    @if (_canExport)
                    {
                        <MudLoadingButton @bind-Loading="_exporting" Variant="Variant.Outlined" Color="Color.Primary"
                                          Label="@ConstantString.Export"
                                          Disabled="@_loading"
                                          StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                          Size="Size.Small"
                                          OnClick="OnExport"
                                          IconColor="Color.Surface">
                            @ConstantString.Export
                        </MudLoadingButton>
                    }
                    @if (_canImport)
                    {
                        <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px">
                            <ActivatorContent>
                                <MudButton HtmlTag="label"
                                           Size="Size.Small"
                                           Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           Disabled="@_loading"
                                           StartIcon="@Icons.Material.Filled.Upload">
                                    @if (_uploading)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                        @ConstantString.Uploading
                                    }
                                    else
                                    {
                                        @ConstantString.Import
                                    }
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    }
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    @if (_canCreate)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="OnCreate"
                                   IconColor="Color.Surface">@ConstantString.New</MudButton>
                    }
                    @if (_canDelete)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectedItems.Count>0))"
                                   Size="Size.Small"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                    }
                </MudHidden>
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">

                @if (_canSearch)
                {
                
                        <MudText Typo="Typo.button">Search: </MudText>
                        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" 
                            Value="@Query.Keyword" Placeholder="@ConstantString.Search" 
                            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" 
                            IconSize="Size.Small" Variant="Variant.Outlined" Margin="Margin.Dense">
                        </MudTextField>
                   
                }

            
                    <MudText Typo="Typo.button">View: </MudText>
                    <MudEnumSelect Style="min-width:150px" Class="pa-0"
                        TEnum="{{ modelname }}ListView" ValueChanged="OnChangedListView" 
                        Value="Query.ListView" Margin="Margin.Dense" Variant="Variant.Outlined" />
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudDataGrid ServerData="@(ServerReload)"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  Outlined="true"
                  Loading="@_loading"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedItems"
                  @bind-SelectedItem="_currentDto"
                  Hover="true" @ref="_table">
             <Columns>
                <SelectColumn ShowInFooter="false"></SelectColumn>
                <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
                    <CellTemplate>
                        @if (_canEdit || _canDelete)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                                     Dense="true"
                                     EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                                @if (_canEdit)
                                {
                                    <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                                }
                                @if (_canDelete)
                                {
                                    <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudIconButton Variant="Variant.Filled"  
                                       Disabled="true"
                                       Icon="@Icons.Material.Filled.DoNotTouch"
                                       Size="Size.Small"
                                       Color="Color.Surface">
                                @ConstantString.NoAllowed
                            </MudIconButton>
                        }
                    </CellTemplate>
                </TemplateColumn>
                @*TODO: Define the fields that should be displayed in data table*@
                {{ mudtdheaderdefinition }}
            </Columns>
            <NoRecordsContent>
                <MudText>@ConstantString.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<{{ modelname }}Dto> _selectedItems = new HashSet<{{ modelname }}Dto>();
    private MudDataGrid<{{ modelname }}Dto> _table = default!;
    private {{ modelname }}Dto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    private {{ modelnameplural }}WithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDisplayName()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Search)).Succeeded;
        _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.{{ modelnameplural }}.Export)).Succeeded;
    }
    private async Task<GridData<{{ modelname }}Dto>> ServerReload(GridState<{{ modelname }}Dto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<{{ modelname }}Dto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView({{ modelname }}ListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        {{ modelname }}CacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword  = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task ShowEditFormDialog(string title, AddEdit{{ modelname }}Command command)
    {
        var parameters = new DialogParameters<{{ modelname }}FormDialog>
            {
                { x=>x.model,command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<{{ modelname }}FormDialog>(title, parameters, options);
        var state = await dialog.Result;

        if (state != null && !state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Clear();
        }
    }

    private async Task OnCreate()
    {
        var command = new AddEdit{{ modelname }}Command();
        await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L[_currentDto.GetClassDisplayName()]), command);
    }
    private async Task OnClone()
    {
        var dto = _selectedItems.First();
        var command = Mapper.Map<{{ modelname }}Dto, AddEdit{{ modelname }}Command>(dto, opts =>
        {
           opts.AfterMap((src, dest) =>
           {
               dest.Id = Guid.Empty;
           });
        });
        await ShowEditFormDialog(string.Format(ConstantString.CreateAnItem, L[_currentDto.GetClassDisplayName()]), command);
    }
    private async Task OnEdit({{ modelname }}Dto dto)
    {
        var command = Mapper.Map<AddEdit{{ modelname }}Command>(dto);
        await ShowEditFormDialog(string.Format(ConstantString.EditTheItem, L[_currentDto.GetClassDisplayName()]), command);
    }

    private async Task OnDelete({{ modelname }}Dto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.{{ masterproperty }});
        var command = new Delete{{ modelname }}Command(new Guid[] { dto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialog(command, ConstantString.DeleteConfirmationTitle, contentText,
            async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            }
        );
    }

    private async Task OnDeleteChecked()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedItems.Count);
        var command = new Delete{{ modelname }}Command(_selectedItems.Select(x => x.Id).ToArray());
        await DialogServiceHelper.ShowDeleteConfirmationDialog(command, ConstantString.DeleteConfirmationTitle, contentText,
            async () =>
            {
                await _table.ReloadServerData();
                _selectedItems.Clear();
            }
        );
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new Export{{ modelnameplural }}Query()
            {
                Keyword = Query.Keyword,
                CurrentUser = UserProfile,
                ListView = Query.ListView,
                OrderBy = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortDirection = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
            };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["{{ modelnameplural }}"]}.xlsx", result.Data, contentType:"application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new Import{{ modelnameplural }}Command(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        if (result.Succeeded)
        {
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
        _uploading = false;
    }

}
