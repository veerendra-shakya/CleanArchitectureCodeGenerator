using {{ rootnamespace }}.{{ applicationprojectname }}.Common.Interfaces.DataAccess;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;

namespace {{ namespacename }};
#nullable disable warnings

public class {{ modelname }}Autocomplete : MudAutocomplete<Guid?>
{
    
    [Inject]
    private I{{ modelname }}Service DataProvider { get; set; } = default!;

    private List<{{ modelname }}Dto>? _{{ modelname }}List;
    
    public {{ modelname }}Autocomplete()
    {
        SearchFunc = SearchKeyValues;
        ToStringFunc = ToString;
        Clearable = true;
        Dense = true;
        ResetValueOnEmptyText = true;
        ShowProgressIndicator = true;
    }
    
    protected override void OnInitialized()
    {
        DataProvider.OnChange += {{ modelname }}Service_OnChange;
    }

    private void {{ modelname }}Service_OnChange()
    {
        InvokeAsync(StateHasChanged);
    }
   
    protected override void Dispose(bool disposing)
    {
        DataProvider.OnChange -= {{ modelname }}Service_OnChange;
        base.Dispose(disposing);
    }

    private Task<IEnumerable<Guid?>> SearchKeyValues(string value, CancellationToken cancellation)
    {
        _{{ modelname }}List = DataProvider.DataSource.ToList();
        var result = new List<Guid?>();
        if (_{{ modelname }}List is not null && string.IsNullOrEmpty(value))
        {
            result = _{{ modelname }}List.Select(x => (Guid?)x.Id).ToList();
        }
        else if(_{{ modelname }}List is not null)
        {
            {{ querystring }}
        }
        return Task.FromResult(result.AsEnumerable());
    }

    private string ToString(Guid? id)
    {
        if (id.HasValue)
        {
            var userDto = DataProvider.DataSource.Find(x => x.Id == id);
            return ${{ returnstring }}
        }
        return string.Empty;
    }

}