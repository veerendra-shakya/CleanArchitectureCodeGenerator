<!-- --------------------------------------------------------------------------
    <auto-generated>
    This file was generated by a code scaffolding tool.
    Manual editing of this file is NOT recommended, as changes will be
    overwritten if the scaffolding tool is run again.

    If you wish to make changes and prevent the scaffolding tool from
    overwriting this file, remove this signature.
    Removing this signature indicates that this file will no longer
    be managed by the scaffolding tool.
    </auto-generated>
---------------------------------------------------------------------------- -->

@using CleanArchitecture.Blazor.Application.Common.Interfaces.DataAccess

<MudButton OnClick="OpenDialog" StartIcon="@Icons.Material.Filled.List" Color="Color.Default" Variant="Variant.Filled" FullWidth=true>Select @Label</MudButton>

<MudPaper Outlined="true" Class="border-dashed my-2">
    <MudStack Justify="Justify.Center" Row="true" Wrap="Wrap.Wrap" StretchItems="StretchItems.All">
        @if (Data != null)
        {
             @*<MudGrid>
                <MudItem xs="12" md="6">
                    <MudText  Label="@L[model.GetMemberDescription(x=>x.FirstName)]" @bind-Value="model.FirstName" For="@(() => model.FirstName)" Required="false" RequiredError="@L["first name is required!"]"></MudTextField>
                </MudItem>
            </MudGrid>
            <MudChip T="{{ modelname }}" Color="Color.Primary">@item.{{ identifierproperty }}</MudChip>*@
        }
        else
        {
            <MudChip T="string">No items selected.</MudChip>
        }
    </MudStack>
</MudPaper>

<MudDialog @bind-Visible="IsDialogVisible" OnBackdropClick="CloseDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Select @Label</MudText>
    </TitleContent>
    <DialogContent>
      
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="CloseDialog">Update & Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public {{ modelname }} Data { get; set; } = new {{ modelname }}();
    [Parameter] public EventCallback<{{ modelname }}> DataChanged { get; set; }
    [Parameter] public EventCallback OnDialogClose { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;


    private bool IsDialogVisible = false;


    private DialogOptions dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = false,
            Position = DialogPosition.TopCenter
        };

    private void OpenDialog()
    {
        IsDialogVisible = true;
    }

    private void CloseDialog()
    {
        IsDialogVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
      
    }
}
