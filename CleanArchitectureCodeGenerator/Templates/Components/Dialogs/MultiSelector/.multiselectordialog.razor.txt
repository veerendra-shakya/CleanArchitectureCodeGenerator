<!-- --------------------------------------------------------------------------
    <auto-generated>
    This file was generated by a code scaffolding tool.
    Manual editing of this file is NOT recommended, as changes will be
    overwritten if the scaffolding tool is run again.

    If you wish to make changes and prevent the scaffolding tool from
    overwriting this file, remove this signature.
    Removing this signature indicates that this file will no longer
    be managed by the scaffolding tool.
    </auto-generated>
---------------------------------------------------------------------------- -->

@using CleanArchitecture.Blazor.Application.Common.Interfaces.DataAccess
<style>
    .custom-grid .mud-table-toolbar {
        height: 50px !important;
        min-height: 50px !important;
        padding-top: 0px !important;
        padding-bottom: 0px !important;
    }
</style>

<MudButton OnClick="OpenDialog" StartIcon="@Icons.Material.Filled.List" Color="Color.Default" Variant="Variant.Filled" FullWidth=true>Select @Label</MudButton>

<MudPaper Outlined="true" Class="border-dashed my-2">
    <MudStack Justify="Justify.Center" Row="true" Wrap="Wrap.Wrap" StretchItems="StretchItems.All">
        @if (SelectedItems.Any())
        {
            @foreach (var item in SelectedItems)
            {
                <MudChip T="{{ modelname }}" Color="Color.Primary">@item.{{ identifierproperty }}</MudChip>
            }
        }
        else
        {
            <MudChip T="string">No items selected.</MudChip>
        }
    </MudStack>
</MudPaper>

<MudDialog @bind-Visible="IsDialogVisible" OnBackdropClick="CloseDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Select @Label</MudText>
    </TitleContent>
    <DialogContent>
        @if (IsLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
        }
        else
        {
            <MudDataGrid T="{{ modelname }}" Items="@FilteredItems" 
                Class="custom-grid border-solid border-2 mud-border-primary pa-4"
                SelectedItems="SelectedItemsInternal" 
                MultiSelection="true" 
                SelectedItemsChanged="@UpdateSelectedItems"
                Bordered="true" Dense="true" 
                Striped="true"
                Elevation="0"
                Height="500px">
                <ToolBarContent>
                    <MudTextField T="string" @bind-Value="SearchText"
                            Placeholder="Search"
                            Adornment="Adornment.Start" OnAdornmentClick="FilterItems"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            AdornmentColor="Color.Secondary"
                            Immediate="true" IconSize="Size.Medium" Class="mt-0"
                            OnKeyUp="FilterItems" />
                    <MudSpacer />
                    <MudButton Disabled="@_processingDataRefresh" OnClick="RefreshData" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh">
                        @if (_processingDataRefresh)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Refresh Data</MudText>
                        }
                    </MudButton>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="{{ modelname }}" />
                    {{ muddatagridpropertycolumns }}
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="{{ modelname }}" RowsPerPageString="" DisableRowsPerPage />
                </PagerContent>
            </MudDataGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="CloseDialog">Update & Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private I{{ modelname }}Service DataProvider { get; set; } = default!;
    [Parameter] public ICollection<{{ modelname }}> SelectedItems { get; set; } = new List<{{ modelname }}>();
    [Parameter] public EventCallback<ICollection<{{ modelname }}>> SelectedItemsChanged { get; set; }
    [Parameter] public EventCallback OnDialogClose { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;


    private bool IsDialogVisible = false;
    private bool IsLoading = false;
    private bool _processingDataRefresh = false;
    private List<{{ modelname }}> AllItems = new();
    private List<{{ modelname }}> FilteredItems = new();
    private HashSet<{{ modelname }}> SelectedItemsInternal = new();
    private string SearchText = string.Empty;

    private DialogOptions dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = false,
            Position = DialogPosition.TopCenter
        };

    private void OpenDialog()
    {
        IsDialogVisible = true;
        FilterItems();
    }

    private void CloseDialog()
    {
        IsDialogVisible = false;
        OnDialogClose.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        IsLoading = true;
        var dataDtoList = DataProvider.DataSource.ToList();
        AllItems = Mapper.Map<List<{{ modelname }}>>(dataDtoList);
        SelectedItemsInternal = SelectedItems != null ? new HashSet<{{ modelname }}>(SelectedItems) : new HashSet<{{ modelname }}>();
        StateHasChanged();
        IsLoading = false;
    }

    private void FilterItems()
    {
        {{ filtereditemsquery }}

        UpdateFilteredItemsSelection();
    }

    private void UpdateFilteredItemsSelection()
    {
        foreach (var item in AllItems)
        {
            if (SelectedItemsInternal.Any(x => x.Id == item.Id))
            {
                SelectedItemsInternal.RemoveWhere(x => x.Id == item.Id);
                SelectedItemsInternal.Add(item);
            }
        }
        //SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private void UpdateSelectedItems(HashSet<{{ modelname }}> selectedItems)
    {
        // Update internal selected items HashSet
        SelectedItemsInternal = selectedItems;

        // Update external ICollection
        SelectedItems.Clear();
        foreach (var item in SelectedItemsInternal)
        {
            SelectedItems.Add(item);
        }

        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
    async Task RefreshData()
    {
        _processingDataRefresh = true;
        await Task.Delay(1000);
        DataProvider.Refresh();
        await LoadItems();
        StateHasChanged();
        _processingDataRefresh = false;
    }
}
