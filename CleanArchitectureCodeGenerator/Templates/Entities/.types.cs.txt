using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using {selectns}.Common.Entities;
using {selectns}.Common.Attributes;

namespace {namespace}
{
    public class {itemname} : BaseAuditableEntity
    {
        [Required]
        [MaxLength(100)]
        [Description("Name of the entity, required and with a maximum length of 100 characters.")]
        [Display(Name = "Entity Name")]
        [PropertyCategory(PropertyCategory.Master)]
        public string Name { get; set; }

        [MaxLength(500)]
        [Description("Description of the entity, optional and with a maximum length of 500 characters.")]
        [Display(Name = "Entity Description")]
        [PropertyCategory(PropertyCategory.Searchable)]
        public string? Description { get; set; }
    
        [Required]
        [Range(0, 100000)]
        [Description("Total value of the order, required and must be between 0 and 100000.")]
        [Display(Name = "Total Order Value")]
        public decimal TotalOrderValue { get; set; }

        [Range(0, 100)]
        [Description("A 32-bit signed integer value, must be between 0 and 100.")]
        [Display(Name = "Integer Value")]
        public int IntValue { get; set; }

        [Display(Name = "Nullable Integer Value")]
        public int? NullableIntValue { get; set; }

        // Additional properties with display names
        [Display(Name = "Long Value")]
        public long LongValue { get; set; }

        [Display(Name = "Nullable Long Value")]
        public long? NullableLongValue { get; set; }

        [Display(Name = "Short Value")]
        public short ShortValue { get; set; }

        [Display(Name = "Nullable Short Value")]
        public short? NullableShortValue { get; set; }

        [Display(Name = "Byte Value")]
        public byte ByteValue { get; set; }

        [Display(Name = "Nullable Byte Value")]
        public byte? NullableByteValue { get; set; }

        [Display(Name = "Float Value")]
        public float FloatValue { get; set; }

        [Display(Name = "Nullable Float Value")]
        public float? NullableFloatValue { get; set; }

        [Display(Name = "Double Value")]
        public double DoubleValue { get; set; }

        [Display(Name = "Nullable Double Value")]
        public double? NullableDoubleValue { get; set; }

        [Range(0.0, 9999.99)]
        [Display(Name = "Decimal Value")]
        public decimal DecimalValue { get; set; }

        [Display(Name = "Nullable Decimal Value")]
        public decimal? NullableDecimalValue { get; set; }

        [Display(Name = "Boolean Value")]
        public bool BoolValue { get; set; }

        [Display(Name = "Nullable Boolean Value")]
        public bool? NullableBoolValue { get; set; }

        [Display(Name = "Character Value")]
        public char CharValue { get; set; }

        [Display(Name = "Nullable Character Value")]
        public char? NullableCharValue { get; set; }

        [StringLength(200, MinimumLength = 5)]
        [Display(Name = "String Value")]
        public string StringValue { get; set; } = string.Empty;

        [Display(Name = "Nullable String Value")]
        public string? NullableStringValue { get; set; }

        [Required]
        [Display(Name = "Date and Time")]
        public DateTime DateTimeValue { get; set; }

        [Display(Name = "Nullable Date and Time")]
        public DateTime? NullableDateTimeValue { get; set; }

        [Required]
        [Display(Name = "GUID Value")]
        public Guid GuidValue { get; set; }

        [Display(Name = "Nullable GUID Value")]
        public Guid? NullableGuidValue { get; set; }

        [RegularExpression(@"^[a-zA-Z0-9]*$", ErrorMessage = "Only alphanumeric characters are allowed.")]
        [Display(Name = "Custom Regex Field")]
        public string CustomRegexField { get; set; } = string.Empty;
    }
}