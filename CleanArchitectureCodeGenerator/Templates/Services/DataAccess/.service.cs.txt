using AutoMapper;
using AutoMapper.QueryableExtensions;
using {rootnamespace}.{applicationprojectname}.Common.Interfaces.DataAccess;
using {rootnamespace}.{applicationprojectname}.Features.{nameofPlural}.Caching;
using {rootnamespace}.{applicationprojectname}.Features.{nameofPlural}.DTOs;
using ZiggyCreatures.Caching.Fusion;

namespace {namespace};
#nullable disable warnings

public class {itemname}Service : I{itemname}Service
{
    private readonly IApplicationDbContext _context;
    private readonly IFusionCache _fusionCache;
    private readonly IMapper _mapper;
    private const string CacheKey = "{itemname}DataServicesCacheKey";
    private static readonly TimeSpan CacheDuration = TimeSpan.FromMinutes(30);

    public event Action? OnChange;
    public List<{itemname}Dto> DataSource { get; private set; } = new();

    public {itemname}Service(
        IFusionCache fusionCache,
        IServiceScopeFactory scopeFactory,
        IMapper mapper)
    {
        var scope = scopeFactory.CreateScope();
        _context = scope.ServiceProvider.GetRequiredService<IApplicationDbContext>();
        _fusionCache = fusionCache;
        _mapper = mapper;
    }

    public void Initialize()
    {
        DataSource = _fusionCache.GetOrSet(CacheKey,
            _ => _context.{nameofPlural}
                .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                .AsNoTracking()
                .ToList(),
                 CacheDuration
        ) ?? new List<{itemname}Dto>();
    }

    public void Refresh()
    {
        _fusionCache.Remove(CacheKey);
        
        DataSource = _fusionCache.GetOrSet(CacheKey,
            _ => _context.{nameofPlural}
                .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                .AsNoTracking()
                .ToList(),
                 CacheDuration
        ) ?? new List<{itemname}Dto>();
        
        OnChange?.Invoke();
    }
}
