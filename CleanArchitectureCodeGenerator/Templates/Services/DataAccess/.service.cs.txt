// ------------------------------------------------------------------------------
// <auto-generated>
//     This class was generated by a code scaffolding tool.
//     Manual editing of this class is NOT recommended, as changes will be
//     overwritten if the scaffolding tool is run again.
//     
//     If you wish to make changes and prevent the scaffolding tool from
//     overwriting this file, remove this signature.
//     Removing this signature indicates that this class will no longer
//     be managed by the scaffolding tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using AutoMapper;
using AutoMapper.QueryableExtensions;
using {{ rootnamespace }}.{{ applicationprojectname }}.Common.Interfaces.DataAccess;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using ZiggyCreatures.Caching.Fusion;

namespace {{ namespacename }};
#nullable disable warnings

public class {{ modelname }}Service : I{{ modelname }}Service
{
    private readonly IApplicationDbContext _context;
    private readonly IFusionCache _fusionCache;
    private readonly IMapper _mapper;
    private const string CacheKey = "{{ modelname }}DataServicesCacheKey";
    private static readonly TimeSpan CacheDuration = TimeSpan.FromMinutes(30);

    private readonly SemaphoreSlim _initializationLock = new(1, 1);
    private bool _isInitialized = false;

    public event Action? OnChange;
    public List<{{ modelname }}> DataSource { get; private set; } = new();

    public {{ modelname }}Service(
        IFusionCache fusionCache,
        IServiceScopeFactory scopeFactory,
        IMapper mapper)
    {
        var scope = scopeFactory.CreateScope();
        _context = scope.ServiceProvider.GetRequiredService<IApplicationDbContext>();
        _fusionCache = fusionCache;
        _mapper = mapper;
    }

    public async Task InitializeAsync()
    {
        if (_isInitialized) return;

        await _initializationLock.WaitAsync();

         try
        {
            if (!_isInitialized)
            {
                var cacheOptions = new FusionCacheEntryOptions
                {
                    Duration = CacheDuration,
                    JitterMaxDuration = TimeSpan.FromSeconds(15),
                    LockTimeout = TimeSpan.FromSeconds(20)
                };

                DataSource = await _fusionCache.GetOrSetAsync(CacheKey,
                    async _ => await _context.{{ modelnameplural }}
                        .AsNoTracking()
                        .ToListAsync(),
                         cacheOptions
                ) ?? new List<{{ modelname }}>();

                _isInitialized = true;
            }
        }
        finally
        {
            _initializationLock.Release();
        }

    }

    public async Task RefreshAsync()
    {
        _fusionCache.Remove(CacheKey);
        
        var cacheOptions = new FusionCacheEntryOptions
        {
            Duration = CacheDuration,
            JitterMaxDuration = TimeSpan.FromSeconds(15), // Add jitter to avoid thundering herd problem
            LockTimeout = TimeSpan.FromSeconds(20) // Adjust timeout based on expected operation time
        };

        DataSource = await _fusionCache.GetOrSet(CacheKey,
            async _ => await _context.{{ modelnameplural }}
                .AsNoTracking()
                .ToListAsync(),
                 cacheOptions
        ) ?? new List<{{ modelname }}>();
        
        OnChange?.Invoke();
    }

    public async Task<List<{{ modelname }}>> GetDataSourceAsync()
    {
        await InitializeAsync();
        return DataSource;
    }
}
