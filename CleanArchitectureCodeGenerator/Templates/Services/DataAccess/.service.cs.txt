using AutoMapper;
using AutoMapper.QueryableExtensions;
using {{ rootnamespace }}.{{ applicationprojectname }}.Common.Interfaces.DataAccess;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using ZiggyCreatures.Caching.Fusion;

namespace {{ namespacename }};
#nullable disable warnings

public class {{ modelname }}Service : I{{ modelname }}Service
{
    private readonly IApplicationDbContext _context;
    private readonly IFusionCache _fusionCache;
    private readonly IMapper _mapper;
    private const string CacheKey = "{{ modelname }}DataServicesCacheKey";
    private static readonly TimeSpan CacheDuration = TimeSpan.FromMinutes(30);

    public event Action? OnChange;
    public List<{{ modelname }}Dto> DataSource { get; private set; } = new();

    public {{ modelname }}Service(
        IFusionCache fusionCache,
        IServiceScopeFactory scopeFactory,
        IMapper mapper)
    {
        var scope = scopeFactory.CreateScope();
        _context = scope.ServiceProvider.GetRequiredService<IApplicationDbContext>();
        _fusionCache = fusionCache;
        _mapper = mapper;
    }

    public void Initialize()
    {
        DataSource = _fusionCache.GetOrSet(CacheKey,
            _ => _context.{{ modelnameplural }}
                .ProjectTo<{{ modelname }}Dto>(_mapper.ConfigurationProvider)
                .AsNoTracking()
                .ToList(),
                 CacheDuration
        ) ?? new List<{{ modelname }}Dto>();
    }

    public void Refresh()
    {
        _fusionCache.Remove(CacheKey);
        
        DataSource = _fusionCache.GetOrSet(CacheKey,
            _ => _context.{{ modelnameplural }}
                .ProjectTo<{{ modelname }}Dto>(_mapper.ConfigurationProvider)
                .AsNoTracking()
                .ToList(),
                 CacheDuration
        ) ?? new List<{{ modelname }}Dto>();
        
        OnChange?.Invoke();
    }
}
