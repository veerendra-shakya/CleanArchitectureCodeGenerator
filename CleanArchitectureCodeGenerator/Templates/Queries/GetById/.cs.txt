using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class Get{itemname}ByIdQuery : ICacheableRequest<{itemname}Dto>
{
   public required Guid Id { get; set; }
   public string CacheKey => {itemname}CacheKey.GetByIdCacheKey($"{Id}");
   public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
}

public class Get{itemname}ByIdQueryHandler :
     IRequestHandler<Get{itemname}ByIdQuery, {itemname}Dto>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<Get{itemname}ByIdQueryHandler> _localizer;

    public Get{itemname}ByIdQueryHandler(
        IApplicationDbContext context,
        IMapper mapper,
        IStringLocalizer<Get{itemname}ByIdQueryHandler> localizer
        )
    {
        _context = context;
        _mapper = mapper;
        _localizer = localizer;
    }

    public async Task<{itemname}Dto> Handle(Get{itemname}ByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.{nameofPlural}.ApplySpecification(new {itemname}ByIdSpecification(request.Id))
                     .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                     .FirstAsync(cancellationToken) ?? throw new NotFoundException($"{itemname} with id: [{request.Id}] not found.");
        return data;
    }
}
