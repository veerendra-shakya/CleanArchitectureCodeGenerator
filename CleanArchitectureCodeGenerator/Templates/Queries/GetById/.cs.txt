// ------------------------------------------------------------------------------
// <auto-generated>
//     This class was generated by a code scaffolding tool.
//     Manual editing of this class is NOT recommended, as changes will be
//     overwritten if the scaffolding tool is run again.
//     
//     If you wish to make changes and prevent the scaffolding tool from
//     overwriting this file, remove this signature.
//     Removing this signature indicates that this class will no longer
//     be managed by the scaffolding tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Specifications;

namespace {{ namespacename }};

public class Get{{ modelname }}ByIdQuery : ICacheableRequest<{{ modelname }}Dto>
{
   public required Guid Id { get; set; }
   public string CacheKey => {{ modelname }}CacheKey.GetByIdCacheKey($"{Id}");
   public MemoryCacheEntryOptions? Options => {{ modelname }}CacheKey.MemoryCacheEntryOptions;
}

public class Get{{ modelname }}ByIdQueryHandler :
     IRequestHandler<Get{{ modelname }}ByIdQuery, {{ modelname }}Dto>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<Get{{ modelname }}ByIdQueryHandler> _localizer;

    public Get{{ modelname }}ByIdQueryHandler(
        IApplicationDbContext context,
        IMapper mapper,
        IStringLocalizer<Get{{ modelname }}ByIdQueryHandler> localizer
        )
    {
        _context = context;
        _mapper = mapper;
        _localizer = localizer;
    }

    public async Task<{{ modelname }}Dto> Handle(Get{{ modelname }}ByIdQuery request, CancellationToken cancellationToken)
    {
        var data = await _context.{{ modelnameplural }}
            .ApplySpecification(new {{ modelname }}ByIdSpecification(request.Id))
            .ProjectTo<{{ modelname }}Dto>(_mapper.ConfigurationProvider)
            .FirstOrDefaultAsync(cancellationToken);
        return data;
    }
}
