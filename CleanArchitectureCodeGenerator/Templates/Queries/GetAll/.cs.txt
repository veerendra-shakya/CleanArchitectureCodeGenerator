// ------------------------------------------------------------------------------
// <auto-generated>
//     This class was generated by a code scaffolding tool.
//     Manual editing of this class is NOT recommended, as changes will be
//     overwritten if the scaffolding tool is run again.
//     
//     If you wish to make changes and prevent the scaffolding tool from
//     overwriting this file, remove this signature.
//     Removing this signature indicates that this class will no longer
//     be managed by the scaffolding tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;

namespace {{ namespacename }};

public class GetAll{{ modelnameplural }}Query : ICacheableRequest<IEnumerable<{{ modelname }}Dto>>
{
   public string CacheKey => {{ modelname }}CacheKey.GetAllCacheKey;
   public MemoryCacheEntryOptions? Options => {{ modelname }}CacheKey.MemoryCacheEntryOptions;
}

public class GetAll{{ modelnameplural }}QueryHandler :
     IRequestHandler<GetAll{{ modelnameplural }}Query, IEnumerable<{{ modelname }}Dto>>
{
    private readonly IApplicationDbContext _context;
    private readonly IMapper _mapper;
    private readonly IStringLocalizer<GetAll{{ modelnameplural }}QueryHandler> _localizer;

    public GetAll{{ modelnameplural }}QueryHandler(
        IApplicationDbContext context,
        IMapper mapper,
        IStringLocalizer<GetAll{{ modelnameplural }}QueryHandler> localizer
        )
    {
        _context = context;
        _mapper = mapper;
        _localizer = localizer;
    }

    public async Task<IEnumerable<{{ modelname }}Dto>> Handle(GetAll{{ modelnameplural }}Query request, CancellationToken cancellationToken)
    {
        var data = await _context.{{ modelnameplural }}
                     .ProjectTo<{{ modelname }}Dto>(_mapper.ConfigurationProvider)
                     .AsNoTracking()
                     .ToListAsync(cancellationToken);
        return data;
    }
}


