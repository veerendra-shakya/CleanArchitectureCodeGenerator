using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Specifications;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Queries.Pagination;

namespace {{ namespacename }};

public class Export{{ modelnameplural }}Query : {{ modelname }}AdvancedFilter, IRequest<Result<byte[]>>
{
      public {{ modelname }}AdvancedSpecification Specification => new {{ modelname }}AdvancedSpecification(this);
}
    
public class Export{{ modelnameplural }}QueryHandler :
         IRequestHandler<Export{{ modelnameplural }}Query, Result<byte[]>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<Export{{ modelnameplural }}QueryHandler> _localizer;
        private readonly {{ modelname }}Dto _dto = new();
        public Export{{ modelnameplural }}QueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IExcelService excelService,
            IStringLocalizer<Export{{ modelnameplural }}QueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(Export{{ modelnameplural }}Query request, CancellationToken cancellationToken)
        {
            var data = await _context.{{ modelnameplural }}.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<{{ modelname }}Dto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<{{ modelname }}Dto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                    {{ exportfuncexpression }}
                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
