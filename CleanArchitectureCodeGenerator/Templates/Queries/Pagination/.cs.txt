// ------------------------------------------------------------------------------
// <auto-generated>
//     This class was generated by a code scaffolding tool.
//     Manual editing of this class is NOT recommended, as changes will be
//     overwritten if the scaffolding tool is run again.
//     
//     If you wish to make changes and prevent the scaffolding tool from
//     overwriting this file, remove this signature.
//     Removing this signature indicates that this class will no longer
//     be managed by the scaffolding tool.
// </auto-generated>
// ------------------------------------------------------------------------------

using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.DTOs;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Caching;
using {{ rootnamespace }}.{{ applicationprojectname }}.Features.{{ modelnameplural }}.Specifications;

namespace {{ namespacename }};

public class {{ modelnameplural }}WithPaginationQuery : {{ modelname }}AdvancedFilter, ICacheableRequest<PaginatedData<{{ modelname }}Dto>>
{
    public override string ToString()
    {
        return $"{{ stringcachekey }}";
    }
    public string CacheKey => {{ modelname }}CacheKey.GetPaginationCacheKey($"{this}");
    public MemoryCacheEntryOptions? Options => {{ modelname }}CacheKey.MemoryCacheEntryOptions;
    public {{ modelname }}AdvancedSpecification Specification => new {{ modelname }}AdvancedSpecification(this);
}
    
public class {{ modelnameplural }}WithPaginationQueryHandler :
         IRequestHandler<{{ modelnameplural }}WithPaginationQuery, PaginatedData<{{ modelname }}Dto>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<{{ modelnameplural }}WithPaginationQueryHandler> _localizer;

        public {{ modelnameplural }}WithPaginationQueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IStringLocalizer<{{ modelnameplural }}WithPaginationQueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _localizer = localizer;
        }

        public async Task<PaginatedData<{{ modelname }}Dto>> Handle({{ modelnameplural }}WithPaginationQuery request, CancellationToken cancellationToken)
        {
           var data = await _context.{{ modelnameplural }}.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                    .ProjectToPaginatedDataAsync<{{ modelname }}, {{ modelname }}Dto>(request.Specification, request.PageNumber, request.PageSize, _mapper.ConfigurationProvider, cancellationToken);
            return data;
        }
}