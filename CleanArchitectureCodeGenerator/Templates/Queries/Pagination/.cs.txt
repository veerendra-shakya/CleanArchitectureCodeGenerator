// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;
using {selectns}.{nameofPlural}.Specifications;

namespace {namespace};

public class {nameofPlural}WithPaginationQuery : {itemname}AdvancedFilter, ICacheableRequest<PaginatedData<{itemname}Dto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => {itemname}CacheKey.GetPaginationCacheKey($"{this}");
    public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
    public {itemname}AdvancedSpecification Specification => new {itemname}AdvancedSpecification(this);
}
    
public class {nameofPlural}WithPaginationQueryHandler :
         IRequestHandler<{nameofPlural}WithPaginationQuery, PaginatedData<{itemname}Dto>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> _localizer;

        public {nameofPlural}WithPaginationQueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _localizer = localizer;
        }

        public async Task<PaginatedData<{itemname}Dto>> Handle({nameofPlural}WithPaginationQuery request, CancellationToken cancellationToken)
        {
           var data = await _context.{nameofPlural}.OrderBy($"{request.OrderBy} {request.SortDirection}")
                                    .ProjectToPaginatedDataAsync<{itemname}, {itemname}Dto>(request.Specification, request.PageNumber, request.PageSize, _mapper.ConfigurationProvider, cancellationToken);
            return data;
        }
}